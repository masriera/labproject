#we plotted a scatter plot using the variables technique id and material id.

df.plot(kind='scatter',x='technique_id',y='material_id',color='red', figsize=(20, 10))
plt.show()

#bar plot with "place_of_origin" and "end_date" variables

place_of_origin = df["place_of_origin"]
date_end = df["date_end"]
x = place_of_origin[:10] 
y = date_end[:10]

x_pos = np.arange(len(x))

plt.bar(x_pos, y, align='center')
plt.xticks(x_pos, x)
plt.ylabel('Date')
plt.xlabel('Places')
plt.title('Relation between places and date')
plt.show()

#simple histogram

fig2= plt.figure(1,[16,9])
date_end.plot(kind='hist', bins=100)

plt.xlabel('End dates of the artworks')

plt.title('Frequency distribution of the artworks according to their end date')
plt.legend()
plt.show()

#Another simple histogram

classification_title = df["classification_title"]
classification_title.value_counts().plot.bar(figsize=(16, 9))
plt.title('Art techniques')

plt.show()

#Scatterplot using "date_start" and "date_end" variables

date_start = df["date_start"]
date_end = df["date_end"]

fig4= plt.figure(1,[15,5])
N = len(date_start)
area = (10 * np.random.rand(N))**2  # 0 to 15 point radii

plt.scatter(date_start, date_end, s=area, alpha=0.5)
plt.title("Scatterplot of artworks' date")
plt.xlabel("Start dates")
plt.ylabel("End dates")
plt.show()

rs = np.random.RandomState(8)

# Set up the matplotlib figure
f, (ax20, ax21, ax22) = plt.subplots(3, 1, figsize=(50, 40), sharex=True)

colorfulness = df["colorfulness"]
artist = df["artist_id"]

x = colorfulness[:40]
y1 = artist[:40]

sns.barplot(x=x, y=y1, palette="rocket", ax=ax20)
ax20.axhline(0, color="k", clip_on=False)
ax20.set_ylabel("Sequential")

# Center the data to make it diverging
y2 = y1 - 5.5
sns.barplot(x=x, y=y2, palette="vlag", ax=ax21)
ax21.axhline(0, color="k", clip_on=False)
ax21.set_ylabel("Diverging")

# Randomly reorder the data to make it qualitative
y3 = rs.choice(y1, len(y1), replace=False)
sns.barplot(x=x, y=y3, palette="deep", ax=ax22)
ax22.axhline(0, color="k", clip_on=False)
ax22.set_ylabel("Qualitative")

# Finalize the plot
sns.despine(bottom=True)
plt.setp(f.axes, yticks=[])
plt.tight_layout(h_pad=2)

plt.show()

import pandas as pd
import csv
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import gridspec
import numpy as np
import seaborn as sns

plt.style.use("seaborn-pastel")  

#Pie chart Countries of origin.
#1. Countries and artists.
#1.1 creating countries and artists new dictionaries.

labels = df['place_of_origin'].value_counts().keys()
values = df['place_of_origin'].value_counts()
values_perc = (values / values.sum()) * 100

dic = dict(zip(labels, values_perc))

import itertools

newdic={}
for key, group in itertools.groupby(dic, lambda k: 'All the rest' if (dic[k] < 2) else k):
    newdic[key] = sum([dic[k] for k in list(group)])


labels1= df['artist_title'].value_counts().keys()
values1 = df['artist_title'].value_counts()
values_perc1 = (values1 / values1.sum()) * 100

dic1 = dict(zip(labels1, values_perc1))


newdic1={}
for key, group in itertools.groupby(dic1, lambda k: 'All the rest' if (dic1[k] < 4) else k):
    newdic1[key] = sum([dic1[k] for k in list(group)])

#setting up the plot with Gridspec:

fig1= plt.figure(1,figsize=(16,9))
gs1 = gridspec.GridSpec(1, 2)
ax1 = fig1.add_subplot(gs1[0])
ax2 = fig1.add_subplot(gs1[1])

#piechart for countries:
labels = newdic.keys()
sizes = newdic.values()
explodec = (0.05, 0, 0, 0, 0)

ax1.pie(sizes, explode=explodec, labels=labels,rotatelabels= True, autopct='%1.1f%%', startangle=0, shadow=True)
ax1.axis('equal')
ax1.legend(loc='upper left')
