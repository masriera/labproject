#we have mported some libraries

import pandas as pd
import csv
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import gridspec
import numpy as np
import seaborn as sns
df=pd.read_csv('art1000.csv')

#now we have to clean the dataset

print(df.info())

#dropping columns 

df = df.drop(columns=df.columns[[1,2,5,6,7,12,13,14,15,17,20,21,22,23,24,26,27,29,30,31,35,36,37,38,40,49,50,51,54,58,59,60,79,80,81,82,83,84,85,86,87,88,89,90,91,92]])

print(df.info())

plt.style.use("seaborn-pastel")

#we plotted a scatter plot using the variables technique id and material id.

df.plot(kind='scatter',x='technique_id',y='material_id',color='red', figsize=(20, 10))
plt.show()

#bar plot with "place_of_origin" and "end_date" variables

place_of_origin = df["place_of_origin"]
date_end = df["date_end"]
x = place_of_origin[:10] 
y = date_end[:10]

x_pos = np.arange(len(x))

plt.bar(x_pos, y, align='center')
plt.xticks(x_pos, x)
plt.ylabel('Date')
plt.xlabel('Places')
plt.title('Relation between places and date')
plt.show()

#simple histogram

fig2= plt.figure(1,[16,9])
date_end.plot(kind='hist', bins=100)

plt.xlabel('End dates of the artworks')

plt.title('Frequency distribution of the artworks according to their end date')
plt.legend()
plt.show()

#Another simple histogram

classification_title = df["classification_title"]
classification_title.value_counts().plot.bar(figsize=(16, 9))
plt.title('Art techniques')

plt.show()

#Scatterplot using "date_start" and "date_end" variables

date_start = df["date_start"]
date_end = df["date_end"]

fig4= plt.figure(1,[15,5])
N = len(date_start)
area = (10 * np.random.rand(N))**2  # 0 to 15 point radii

plt.scatter(date_start, date_end, s=area, alpha=0.5)
plt.title("Scatterplot of artworks' date")
plt.xlabel("Start dates")
plt.ylabel("End dates")
plt.show()

rs = np.random.RandomState(8)

# Set up the matplotlib figure
f, (ax20, ax21, ax22) = plt.subplots(3, 1, figsize=(50, 40), sharex=True)

colorfulness = df["colorfulness"]
artist = df["artist_id"]

x = colorfulness[:40]
y1 = artist[:40]

sns.barplot(x=x, y=y1, palette="rocket", ax=ax20)
ax20.axhline(0, color="k", clip_on=False)
ax20.set_ylabel("Sequential")

# Center the data to make it diverging
y2 = y1 - 5.5
sns.barplot(x=x, y=y2, palette="vlag", ax=ax21)
ax21.axhline(0, color="k", clip_on=False)
ax21.set_ylabel("Diverging")

# Randomly reorder the data to make it qualitative
y3 = rs.choice(y1, len(y1), replace=False)
sns.barplot(x=x, y=y3, palette="deep", ax=ax22)
ax22.axhline(0, color="k", clip_on=False)
ax22.set_ylabel("Qualitative")

# Finalize the plot
sns.despine(bottom=True)
plt.setp(f.axes, yticks=[])
plt.tight_layout(h_pad=2)

plt.show()



#Pie chart Countries of origin.
#1. Countries and artists.
#1.1 creating countries and artists new dictionaries.

labels = df['place_of_origin'].value_counts().keys()
values = df['place_of_origin'].value_counts()
values_perc = (values / values.sum()) * 100

dic = dict(zip(labels, values_perc))

import itertools

newdic={}
for key, group in itertools.groupby(dic, lambda k: 'All the rest' if (dic[k] < 2) else k):
 newdic[key] = sum([dic[k] for k in list(group)])


labels1= df['artist_title'].value_counts().keys()
values1 = df['artist_title'].value_counts()
values_perc1 = (values1 / values1.sum()) * 100

dic1 = dict(zip(labels1, values_perc1))


newdic1={}
for key, group in itertools.groupby(dic1, lambda k: 'All the rest' if (dic1[k] < 3) else k):
 newdic1[key] = sum([dic1[k] for k in list(group)])

#setting up the plot with Gridspec:

fig1= plt.figure(1,figsize=(16,9))
gs1 = gridspec.GridSpec(1, 2)
ax1 = fig1.add_subplot(gs1[0])
ax2 = fig1.add_subplot(gs1[1])

#piechart for countries:
labels = newdic.keys()
sizes = newdic.values()
#explodec = (0.05, 0, 0, 0, 0) 

ax1.pie(sizes,labels=labels,rotatelabels= True, autopct='%1.1f%%', startangle=0, shadow=True)
ax1.axis('equal')
ax1.legend(loc='upper left')

#piechart for artists:

labels1 = newdic1.keys()
sizes1 = newdic1.values()
#explode1 = (0.002, 0, 0, 0, 0, 0) 


ax2.pie(sizes1, labels=labels1,rotatelabels= True, autopct='%1.1f%%', radius=0.10, startangle=0)
ax2.axis('equal')


#plotting the final results
fig1.suptitle('Percentage of artworks\' countries of origin and artists', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig('piecharts countries and artists')
plt.show()



#%%

#Pie charts medium display and style_title

fig2= plt.figure(1,figsize=(16,9)) 
gs2 = gridspec.GridSpec(1, 2)
ax3 = fig2.add_subplot(gs2[0])
ax4 = fig2.add_subplot(gs2[1])


#creating two new dictionaries: 1. newdicstyle


labelstyle = df['style_title'].value_counts().keys()
valuestyle = df['style_title'].value_counts()
valuestyle_perc = (valuestyle / valuestyle.sum()) * 100

dicsty = dict(zip(labelstyle, valuestyle_perc))

import itertools

newdicstyle={}
 for key, group in itertools.groupby(dicsty, lambda k: 'All the rest' if (dicsty[k] < 1) else k):
     newdicstyle[key] = sum([dicsty[k] for k in list(group)])   



#builiding second dictionary for materials: 
labelmat = df['classification_title'].value_counts().keys()
valuemat = df['classification_title'].value_counts()
valuemat_perc = (valuemat / valuemat.sum()) * 100

dicmat = dict(zip(labelmat, valuemat_perc))


newdicmat={}
 for key, group in itertools.groupby(dicmat, lambda k: 'All the rest' if (dicmat[k] < 3) else k):
     newdicmat[key] = sum([dicmat[k] for k in list(group)])   


#builing piechart for style

labelstyle2 = newdicstyle.keys()
sizesstyle = newdicstyle.values()
#explodestyle = (0.05, 0, 0, 0, 0, 0) 

ax3.pie(sizesstyle, labels=labelstyle2,rotatelabels= True, autopct='%1.1f%%', startangle=0, shadow=True)
ax3.axis('equal')
ax3.legend(loc='upper left')

#piechart for medium display
labelmat2 = newdicmat.keys()
sizesmat2 = newdicmat.values()
#explodemat=(0.02, 0.02, 0, 0, 0, 0, 0, 0, 0, 0)

ax4.pie(sizesmat2, labels=labelmat2,rotatelabels= True, autopct='%1.1f%%', radius=0.10, startangle=0, shadow=False)
ax4.axis('equal')
ax4.legend(loc='upper right')
#plotting final results:
fig2.suptitle('Percentage of artworks\' styles and materials', fontsize=15, fontweight='bold')
plt.tight_layout()
plt.savefig('piecharts countries and artists')
plt.show()

#countplot popularity according to place of origin

fig3=plt.figure(figsize=(16,9))

ax5 = sns.countplot(x='place_of_origin',hue='has_not_been_viewed_much', data=df)
ax5.set_xticklabels(ax5.get_xticklabels(), rotation=50, ha="right")
plt.xlabel('Countries of origin of the atworks', labelpad=14)
plt.ylabel('Number of artworks')
plt.title('Popularity of artworks according to their countries of origin', fontsize=12, fontweight='bold')
plt.tight_layout()
plt.legend(labels=["False","True"], title = "Has not been viewed much",
fontsize = 'large', title_fontsize = "10", loc='upper right')
plt.show()

plt.savefig('hsn')

#%% 
#numbers of artwork in the dataframe displayed in Chicago


fig4= plt.figure(figsize=(16,9))
ax6= sns.barplot(x=df.is_on_view.value_counts().index, y=df.is_on_view.value_counts())
plt.ylabel('Numbers of artworks')
plt.title('Number of artworks in the dataframe displayed in Chicago', fontsize=10, fontweight='bold')
plt.tight_layout()
plt.show()
plt.savefig('nart', dpi=300)

#%%
#better visualization:in percentage
#where are located the arts on display?
fig6= plt.figure(figsize=(16,9)) 
explodep=[0.05, 0]

ax7=df['is_on_view'].value_counts().plot(kind='pie', explode= explodep, ylabel='',  autopct='%1.1f%%', shadow=True)
plt.title('Percentage of artworks on display in Chicago',  fontsize=20, fontweight='bold')
plt.legend(title='Percentage of artworks displayed', loc='upper right')
plt.show()
plt.savefig('artdisp')

#%%

#creating dataframe for artworks on display

artsdisplay = df[df['is_on_view'] == True]

#%%

#location of artworks

fig7 = plt.figure(figsize=(20,10))
 
ax7 = fig7.add_subplot(121)
ax7.set_title('Percentage of artworks in dataframe on display in chicago')
explodep=[0.05, 0]
df['is_on_view'].value_counts().plot(kind='pie', explode= explodep, ylabel='',  autopct='%1.1f%%', shadow=True)
ax7.legend(loc='lower left')

ax8 = fig7.add_subplot(122)
artsdisplay['gallery_title'].value_counts().plot(kind='bar')
plt.suptitle('Artworks on display in Chicago', fontsize=20, fontweight='bold')
plt.title('In which gallery are the artworks located?')
plt.savefig("artworks displayed in Chicago.png", dpi=300)
plt.show()



#%%
#artists on display
fig8= plt.figure(figsize=(16,9))

ax8= sns.countplot(x='artist_title',data= artsdisplay, palette='pastel')
ax8.set_xticklabels(ax8.get_xticklabels(), rotation=40, ha="right")
plt.xlabel('')
plt.ylabel('')
plt.title('Artists on display in Chicago',fontsize=20, fontweight='bold')
plt.tight_layout()
plt.savefig('artists on display in chicago')
plt.show()

