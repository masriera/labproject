#1. installimng packages required
install.packages (tidyverse)
packages = c("tidyverse", "magrittr", 'lubridate')

installed_packages = packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

#2. import dataset:
df <- read.csv('DF_1999movies.csv')

#3.getting a general understanding of the dataset:
glimpse(df)

head(df)

#4. deselecting variables:

df <- df %>%
  select(-Response, -Error, -Poster, -Ratings, -imdbID, -Website, -X)

#5. checking for duplicates:

df <- df %>%
  distinct()

######## checking for missing cells##########

# calculating the product of dimensions of dataframe
totalcells = prod(dim(df))

# calculating the number of cells with na
missingcells = sum(is.na(df))
# calculating percentage of missing values
percentage = (missingcells * 100 )/(totalcells)
print("Percentage of missing values' cells")
print (percentage)

########DATA MANIPULATION ############

#transforming 'Release' and DVD values into date:

df$Released <- dmy(df$Released)
NotR <- sum(is.na(df$Released))
length(df$Released)
1875/4890*100 #checking for percentage of missing values


df$DVD <- dmy(df$DVD)
notdvd <- sum(is.na(df$DVD))
length(df$DVD)
4061/4890 * 100 #83% of missing value, we might consider of removing this variable


#removing DVD variable:
df <- df %>%
  select(-DVD)


#Transforming Runtime into integer:

name <- df$Runtime
df$Runtime <- as.integer(str_sub(name,1,nchar(name)-4))
length(df$Runtime)
narun <- sum(is.na(df$Runtime))
1468/4890*100 #30% of missing values


#boxoffice in numeric
df$BoxOffice <- as.integer(gsub('[$,]', '', df$BoxOffice))
nabox <- sum(is.na(df$BoxOffice))
4492/4890 * 100 #90% of missing value, we might consider removing this variable 


#imbdvotes in numeric
df$imdbVotes <- as.integer(gsub('[,]', '', df$imdbVotes))
nabox <- sum(is.na(df$imdbVotes))

#transforming selected character variables in factor in order to have a better general understanding of the dataset:

#transforming Genre:
df$Genre <- as.factor(df$Genre)


#Transforming rated in factor: 
length(df$Rated)
df$Rated <- as.factor(df$Rated)
table(df$Rated)
df$Rated <- fct_collapse(df$Rated, NotRated = c('Not Rated', 'Unrated'))

#AWARDS in factor:
length(df$Awards)   
Awards.final <- na.omit(df$Awards)
df$Awards <- as.factor((df$Awards))
length(Awards.final)  
table(df$Awards)
df$Awards <- fct_collapse(df$Awards, USA = c('USA', 'United States'))


#COUNTRIES in Factor:

df$Country <- as.factor(df$Country)
table(df$Country)
df$Country <- fct_collapse(df$Country, USA = c('USA', 'United States'))

#Language in Factor:
df$Language <- as.factor(df$Language)


#LANGUAGE
length(df$Language)
is.na(df$Language)
Language.1 <- subset(df$Language, df$Language != "English")
Language.2 <- subset(df$Language, df$Language == "English")
Languages <- c(Language.1, Language.2)
str(Languages)

# checking cleaned dataframe:
summary(df)

################GGPLOT################

#barplot Runtime:

barplot(table(Runtime),  # frequency distribution of the variable Runtime 
        col= c(4,5),             
        main="Barplot of the Runtime",  
        xlab = "runtime")

#histogram funziona
Votes <- df$imdbVotes
str(Votes)
Votes_f <- as.numeric(Votes)
str(Votes_f)
votes <- Votes_f[1:50]

hist(votes,  # put the variable 
     main="time of release",  
     xlab= "released",
     freq = T,   # To have the density on the Y-axis (F stands for FALSE...)
     col="lightgreen")

#scatterplot
#relazione tra runtime e imbdRating


Rating <- df$imdbRating
str(Rating)
Rating10 <- df %>%
  mutate(Rating = fct_lump(Rating, n = 9)) %>%
  count(Rating, sort = TRUE) %>%
  print(n = Inf)

Votes <- df$imdbVotes
str(Votes)

Votes10 <- df %>%
  mutate(Votes = fct_lump(Votes, n = 9)) %>%
  count(Votes, sort = TRUE) %>%
  print(n = Inf)


ggplot(df, aes(x= Votes, y=Rating )) + 
  geom_point() +
  labs(x="Runtime", 
       y="Rating", 
       title = "Relationship between runtime and ratings") +
  theme_bw()
  
 #barplot language:
df$Language <- na_if(df$Language, 'NaN')
Language <- df$Language

Language10 <- df %>%
  mutate(Language = fct_lump(Language, n = 9)) %>%
  count(Language, sort = TRUE) 

Language10 %>%
  mutate(n = n/sum(n)) %>%
  ggplot(aes(x=reorder(Language, -n),
             y= n,
             fill= Language)) +
  geom_col()+
  labs(x='',y= 'Relative frequencies',subtitle= 'Relative frequencies of the first 10 Languages', title='First 10 languages')+
  theme_gray() 
